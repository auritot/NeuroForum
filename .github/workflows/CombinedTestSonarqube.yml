name: CI Test and Sonarqube Analysis

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          DJANGO_TEST_DATABASE: test_neuroforum_database
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379

    env:
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      DJANGO_TEST_DATABASE: test_neuroforum_database
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      FERNET_KEY: ${{ secrets.FERNET_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DEBUG: "False"
      RECAPTCHA_PUBLIC_KEY: ${{ secrets.RECAPTCHA_PUBLIC_KEY }}
      RECAPTCHA_PRIVATE_KEY: ${{ secrets.RECAPTCHA_PRIVATE_KEY }}
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      EMAIL_HOST: smtp.gmail.com
      EMAIL_USE_TLS: "True"
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare login log file for tests
      run: |
        mkdir -p logs
        touch logs/login_failures.log

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Java (required by SonarQube)
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config mysql-client

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          mysqladmin ping -h 127.0.0.1 -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" && break
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Create test database manually
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" -e "
          CREATE DATABASE IF NOT EXISTS ${DJANGO_TEST_DATABASE};
          GRANT ALL PRIVILEGES ON ${DJANGO_TEST_DATABASE}.* TO '${MYSQL_USER}'@'%';
          FLUSH PRIVILEGES;"
      env:
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        DJANGO_TEST_DATABASE: test_neuroforum_database
        MYSQL_USER: ${{ secrets.MYSQL_USER }}

    - name: Run Django migrations
      run: |
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput

    - name: Create pytest.ini dynamically
      run: |
        echo "[pytest]" > pytest.ini
        echo "DJANGO_SETTINGS_MODULE = neuroforum_django.settings" >> pytest.ini
        echo "python_files = tests.py test_*.py *_tests.py" >> pytest.ini

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: neuroforum_django.settings
        CI: true
      run: |
        mkdir -p reports
        coverage run -m pytest
        coverage xml -o reports/coverage.xml

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=neuroforum
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}      